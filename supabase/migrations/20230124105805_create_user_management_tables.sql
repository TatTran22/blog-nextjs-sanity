--
-- For use with https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone
-- Custom types
create type public.app_permission as enum('channels.delete', 'channel_messages.delete');
create type public.app_role as enum('admin', 'moderator');
create type public.user_status as enum('ONLINE', 'OFFLINE');
-- USERS
create table public.users (
  id uuid references auth.users on delete cascade not null primary key,
  username text unique,
  status user_status default 'OFFLINE'::public.user_status,
  full_name text,
  avatar_url text,
  website text,
  created_at timestamp with time zone default timezone ('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone ('utc'::text, now()) not null,
  constraint username_length check (char_length(username) >= 3)
);
comment on table public.users is 'Profile data for each user.';
comment on column public.users.id is 'References the internal Supabase Auth user.';
-- CHANNELS
create table public.channels (
  id uuid default gen_random_uuid() not null primary key,
  slug text not null unique,
  name varchar(40) not null,
  description text,
  created_at timestamp with time zone default timezone ('utc'::text, now()) not null,
  created_by uuid references public.users not null
);
comment on table public.channels is 'Channels for each workspace.';
-- CHANNEL MEMBERS
create table public.channel_members (
  id bigint generated by default as identity primary key,
  channel_id uuid references public.channels on delete cascade not null,
  user_id uuid references public.users on delete cascade not null,
  unique (channel_id, user_id)
);
-- MESSAGE
create table public.channel_messages (
  id uuid default gen_random_uuid() not null primary key,
  sender_id uuid references public.users on delete cascade not null,
  channel_id uuid references public.channels on delete cascade not null,
  parent_message_id uuid references public.channel_messages on delete cascade,
  content text not null,
  created_at timestamp with time zone default timezone ('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone ('utc'::text, now()) not null
);
comment on table public.channel_messages is 'Messages for each channel.';
comment on table public.channel_members is 'Users who are members of each channel.';
-- USER ROLES
create table public.user_roles (
  id bigint generated by default as identity primary key,
  user_id uuid references public.users on delete cascade not null,
  role app_role not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';
-- ROLE PERMISSIONS
create table public.role_permissions (
  id bigint generated by default as identity primary key,
  role app_role not null,
  permission app_permission not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';
-- authorize with role-based access control (RBAC)
create function public.authorize (
  requested_permission app_permission,
  user_id uuid
) returns boolean as $$
declare bind_permissions int;
begin
select count(*)
from public.role_permissions
  inner join public.user_roles on role_permissions.role = user_roles.role
where role_permissions.permission = authorize.requested_permission
  and user_roles.user_id = authorize.user_id into bind_permissions;
return bind_permissions > 0;
end;
$$ language plpgsql security definer;
-- Secure the tables
alter table public.users enable row level security;
alter table public.channels enable row level security;
alter table public.channel_messages enable row level security;
alter table public.user_roles enable row level security;
alter table public.role_permissions enable row level security;
create policy "Allow logged-in read access" on public.users for
select using (true);
create policy "Allow individual insert access" on public.users for
insert with check (auth.uid () = id);
create policy "Allow individual update access" on public.users for
update using (auth.uid () = id);
create policy "Allow logged-in read access" on public.channels for
select using (true);
create policy "Allow individual insert access" on public.channels for
insert with check (auth.uid () = created_by);
create policy "Allow individual delete access" on public.channels for delete using (auth.uid () = created_by);
create policy "Allow authorized delete access" on public.channels for delete using (authorize ('channels.delete', auth.uid ()));
create policy "Allow anyone to read channel messages" on public.channel_messages for
select using (true);
-- create policy "Allow logged-in read access" on public.messages for
-- select using (true);
create policy "Allow individual insert access" on public.channel_messages for
insert with check (auth.uid () = sender_id);
create policy "Allow individual update access" on public.channel_messages for
update using (auth.uid () = sender_id);
create policy "Allow individual delete access" on public.channel_messages for delete using (auth.uid () = sender_id);
create policy "Allow authorized delete access" on public.channel_messages for delete using (authorize ('channel_messages.delete', auth.uid ()));
create policy "Allow individual read access" on public.user_roles for
select using (auth.uid () = user_id);
-- Send "previous data" on change
alter table public.users replica identity full;
alter table public.channels replica identity full;
alter table public.channel_messages replica identity full;
-- inserts a row into public.users and assigns roles
create function public.handle_new_user () returns trigger as $$
declare is_admin boolean;
begin
insert into public.users (id, username, full_name, avatar_url)
values (
    new.id,
    new.email,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url'
  );
select count(*) = 1
from auth.users into is_admin;
if position('tattran22@gmail.com' in new.email) > 0 then
insert into public.user_roles (user_id, role)
values (new.id, 'admin');
elsif position('jessetran22@gmail.com' in new.email) > 0 then
insert into public.user_roles (user_id, role)
values (new.id, 'moderator');
end if;
return new;
end;
$$ language plpgsql security definer;
-- trigger the function every time a user is created
create trigger on_auth_user_created
after
insert on auth.users for each row execute procedure public.handle_new_user ();
-- deletes a row from public.users
create function public.handle_deleted_user () returns trigger as $$ begin
delete from public.users
where id = old.id;
return old;
end;
$$ language plpgsql security definer;
-- trigger the function every time a user is deleted
create trigger on_auth_user_deleted
after delete on auth.users for each row execute procedure public.handle_deleted_user ();
/**
 * REALTIME SUBSCRIPTIONS
 * Only allow realtime listening on public tables.
 */
begin;
-- remove the realtime publication
drop publication if exists supabase_realtime;
-- re-create the publication but don't enable it for any tables
create publication supabase_realtime;
commit;
-- add tables to the publication
alter publication supabase_realtime
add table public.channels;
alter publication supabase_realtime
add table public.channel_messages;
alter publication supabase_realtime
add table public.users;
-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');
-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects for
select using (bucket_id = 'avatars');
create policy "Anyone can upload an avatar." on storage.objects for
insert with check (bucket_id = 'avatars');